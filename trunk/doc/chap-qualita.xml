<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<!-- Questo file contiene la tabella dei requisiti -->
<!DOCTYPE chapter [
<!ENTITY % myent SYSTEM "entities.ent">
%myent;
]>
<chapter xml:lang="it" xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:id="chap-qualita">
    <title>Piano di qualità</title>
    <para>
    Il presente piano intende stabilire l'insieme delle attività per la garanzia della qualità dell'intero progetto software. Il piano s'intende compreso e condiviso unanimemente da tutti i membri della squadra.
    </para>
    
    <para>
    La guida di riferimento (http://www.ambysoft.com/unifiedprocess/agileUP.html) del modello di processo scelto suggerisce già delle attività necessarie per assicurare la qualità. Quest'ultime sono state opportunamente declinate nel contesto del presente progetto. Il piano di qualità infatti è stato stilato tenendo bene in mente quelli che sono i suoi costi ed il loro rapporto rispetto ai benefici. Considerate, quindi, le ridotte dimensioni e l'abbordabile complessità del progetto si è deciso di optare per attività di garanzia della qualità il più possibile snelle, in linea con il modello di processo scelto, cercando di non gravare eccessivamente sui costi.
    </para>
    <para>
    Nelle prossime sezioni si definisce la portata del piano di qualità, le pratiche e gli strumenti a supporto, le responsabilità e le metriche utilizzate. Infine l'ultima sezione contiene il piano delle attività da svolgere per ogni fase e i risultati più significativi dei collaudi.
    </para>
    <section>
        <title>Portata del piano di qualità</title>
        
<!--        <para>-->
<!--        "Il controllo della qualità è la serie di esami, revisioni e collaudi applicati lungo tutto il ciclo di sviluppo per garantire che ogni lavorato soddisfi i requisiti imposti". Pressman-->
<!--        </para>-->
        <para>
        Il controllo di qualità è applicabile a tutti gli artefatti prodotti lungo il ciclo di sviluppo del prodotto.
        L'elenco che segue definisce in questi termini la portata del presente piano:
        <itemizedlist>
        <listitem><para>piano di processo;</para></listitem>
        <listitem><para>specifiche dei requisiti;</para></listitem>
        <listitem><para>manufatti della progettazione;</para></listitem>
        <listitem><para>software;</para></listitem>
        <listitem><para>documentazione.</para></listitem>
        </itemizedlist>
            </para>
        <para/>
    </section>
    <section>
        <title>Responsabili delle attività di garanzia della qualità</title>
<para>        Considerata l'esiguità del numero di persone in seno al progetto e considerata la molteplicità di ruoli che le stesse devono ricoprire, la responsabilità delle attività per la garanzia della qualità (e.g. collaudi o revisioni) è spalmata in maniera più o meno uniforme tra i membri della squadra; tuttavia rimane inteso che il responsabile finale della qualità dei prodotti è il QE.</para>
    </section>
    <section>
        <title>Pratiche, standard e strumenti a supporto della qualità</title>
        
        <para>
        Le revisioni costituiscono lo strumento principale mediante il quale è possibile assicurare qualità. Esse costituiscono una sorta di filtro durante il processo di sviluppo e servono a scoprire errori e difetti di un qualsiasi artefatto. In letteratura si trovano due tipi di revisioni: quelle informali, condotte anche davanti ad una macchinetta del caffè tra i diretti interessati, e quelle formali, per le quali invece sono previste delle vere e proprie riunioni oltre che un dettagliato protocollo a cui attenersi.
        
        Per il presente progetto sono quindi pianificate due diversi tipi di revisioni: quelle informali, i cui esiti non saranno documentati, e una sorta di revisioni "formali".
        In particolare per le revisioni formali si stabilisce che:
        <itemizedlist>
        <listitem><para>l'artefatto da revisionare sia revisionato da uno o più membri della squadra che non hanno partecipato alla sua realizzazione oppure dall'intera squadra;</para></listitem>
        <listitem><para>l'esito della revisione sia documentato in poche righe e sia notificato ai produttori dell'artefatto.</para></listitem>
        </itemizedlist>
        Le revisioni "formali" saranno comunque in numero ridotto e principalmente saranno fatte per abbattere i rischi più elevati derivanti dalla fase di progettazione.
        </para>
        <para>
        Considerata la natura del modello di processo scelto si è deciso di adottare alcune pratiche proprie dell'Extreme Programming per ottenere i massimi benefici dal processo agile messo a punto. In particolare si stabilisce che i membri della squadra dovranno partecipare a brevissime riunioni mattutine, anche in piedi, utili per fare il punto della situazione, aggiornarsi sullo stato dei lavori e, perché no, rafforzare lo spirito di squadra. Un'altra pratica che dovrà essere adottata è quella della programmazione a coppie (c.d. pair programming): ciò dovrebbe consentire di ridurre al minimo il numero di bachi nel codice accorciando sensibilmente i tempi per il collaudo.
        In generale si consiglia un approccio Test Driven per la produzione di software: si dovranno sviluppare quanto prima test di regressione mediante l'utilizzo di JUnit.
        </para>
        <para>
        Lo standard ISO 9126 identifica in sei attributi la qualità nel campo del software:
        <itemizedlist>
        <listitem><para>funzionalità;</para></listitem>
        <listitem><para>affidabilità;</para></listitem>
        <listitem><para>facilità d'uso;</para></listitem>
        <listitem><para>efficienza;</para></listitem>
        <listitem><para>facilità di manutenzione;</para></listitem>
        <listitem><para>portabilità.</para></listitem>
        </itemizedlist>
        La qualità del software prodotto dovrà essere di volta in volta misurata rispetto a questi attributi. Per questi scopi
        si consiglia l'installazione del plugin EclipseMetrics per Eclipse al fine di monitorare la qualità del codice prodotto.
        EclipseMetrics calcola diverse metriche per il codice, è altamente configurabile e attraverso la vista dei problemi di
        Eclipse avverte di eventuali violazioni degli intervalli tollerati.
        </para>
    </section>
    <section>
        <title>Metriche</title>
        <para>
        Nella precedente sezione si è accennato all'utilizzo del plugin EclipseMetrics per il calcolo di diverse metriche per il
        codice sorgente. Quelle che effettivamente saranno calcolate e tenute in considerazione sono riassunte nell'elenco che segue:
        <itemizedlist>
        <listitem><para> CC (Cyclomatic Complexity): misura il numero di sezioni di codice senza diramazioni all'interno di un
		metodo; è un indicatore della sua complessità;</para>
        </listitem>
        <listitem><para>NOL (Number of Level): misura il livello di annidamento del metodo;</para></listitem>
        <listitem><para>NOS (Number of Statement): misura il numero di statement in un metodo;</para></listitem>
        <listitem><para>NOP (Number of Parameters): misura il numero di parametri di un metodo;</para></listitem>
        <listitem><para>NOF (Number of Field): misura il numero di campi di una classe;</para></listitem>
        <listitem><para>Ec (Efferent Coupling): misura l'accoppiamento di una classe;</para></listitem>
        <listitem><para>WMpC (Weighted Methods per Class): è la somma delle complessità ciclomatiche dei metodi della
        classe;</para></listitem>
        <listitem><para>LCOM-CK (Lack of Cohesion in Methods - Chidamber e Kemerer): misura la coesione di una classe
        secondo la metrica proposta da Chidamber e collega.</para></listitem>
        </itemizedlist>
        </para>
    </section>
    
    <section>
        <title>Attività per la garanzia della qualità</title>
        <para>
        La garanzia di qualità si compone di diverse attività che attraversano tutto il processo software.
        La presente sezione contiene, per ogni fase, il piano dettagliato delle attività previste.
        </para>
        <section>
          <title>Durante tutte le fasi</title>
          <para>
          Uno dei rischi maggiori connessi allo sviluppo del progetto è l'inesperienza dei membri
          della squadra; pertanto si stabilisce che il piano di processo debba essere continuamente
          monitorato, in maniera informale, durante tutte le fasi dello sviluppo. Eventuali divergenze significative
          dovranno essere prese in considerazione e discusse all'interno della squadra al fine di
          comprenderne le cause. Solo attraverso la comprensione di quest'ultime si
          sarà in grado di mantenere un adeguato controllo sul processo.
          </para>
          <para>
          La qualità della presente relazione dovrà anch'essa essere monitorata durante tutto il ciclo 
          di sviluppo. La responsabilità dei controlli è affidata a tutti i membri della squadra.
          La qualità della documentazione dovrà essere valutata in termini di completezza, chiarezza e 
          correttezza. Si dovrà prestare attenzione anche alla qualità della formattazione dei
          contenuti nonché dell'impaginazione.
          I controlli, che manterranno un carattere informale, dovranno essere effettuati tramite opportune revisioni incrociate.
          
           
          </para>
      	</section>	
        
        <section>
            <title>Fase di avvio</title>
            <section>
                <title>Revisione delle specifiche dei requisiti</title>
                <para> Revisori: squadra.</para>
                
                
<!--                : è importante che tra i membri della squadra vi sia una totale accordanza nella comprensione dei requisiti per assicurarsi di sviluppare il prodotto giusto.-->
                
                
                <para> Verifiche: completezza delle specifiche dei requisiti rispetto al documento
                    dei requisiti, chiarezza, coerenza, tracciabilità, precisione, assenza di
                    ambiguità nella comprensione tra i membri della squadra, convergenza
                    sull'assegnazione delle priorità. </para>
                <para> Esito: revisione effettuata in data 30/04/2009. Chiarite alcune divergenze
                    sull'assegnazione delle priorità. </para>
            </section>
            <section>
                <title>Revisione del modello dei casi d'uso</title>
                <para> Revisori: squadra.</para>
                <para> Verifiche: completezza e coerenza dei casi d'uso rispetto ai requisiti
                    funzionali e viceversa, corretta identificazione degli attori, coerenza
                    chiarezza e completezza nella descrizione degli scenari e dei flussi
                    alternativi, completezza e correttezza delle relazioni tra casi d'uso. </para>
                <para> Esito: revisione effettuata in data 30/04/2009. Ristrutturazione di parte del
                    diagramma UML: eliminazione di qualche caso d'uso, individuazione di nuove
                    relazioni tra casi d'uso. Chiarimenti sul flusso degli eventi. </para>
            </section>
            <section>
                <title>Revisione del modello architetturale</title>
                <para> Revisori: TS, PM.</para>
                <para> Verifiche: complessità, coesione, completezza rispetto al problema,
                    compatibilità con le specifiche dei requisiti, dimensioni, chiarezza. </para>
                <para> Esito (TS): revisione effettuata in data 4/5/2009. Entrambi i modelli sono
                    semplici e abbastanza astratti: il sistema che rappresentano non &egrave;
                    pi&ugrave; complesso del previsto, e di sicura fattibilit&agrave;. I modelli
                    sono compatibili coi requisiti, non propongono soluzioni non necessarie agli
                    scopi del progetto, ma si limitano a soddisfare alcuni dei requisiti di base.
                    Non si rileva che vi siano requisiti che avrebbero dovuto essere espressi nel
                    modello che siano stati tralasciati.</para>
                    <para> Esito (PM): revisione effettuata in data 6/5/2009.
                      I diagrammi non rispettano del tutto i requisiti R1N e
                      R2N, poiché non aderiscono allo schema a tre livelli
                      consueto per le applicazioni realizzate con tecnologia
                      J2EE (in particolare la comunicazione fra il livello
                      informativo e il livello di interfaccia utente dovrebbe
                      sempre essere veicolata attraverso il livello business).
                    </para>
            </section>
            <section>
                <title>Revisione del piano preliminare di schieramento</title>
                <para> La revisione del piano preliminare di schieramento sarà informale e non necessiterà di essere documentata.</para>
            </section>
            <section>
                <title>Revisione del prototipo dell'interfaccia</title>
                <para> La revisione del prototipo dell'interfaccia sarà informale e non necessiterà di
                    essere documentata.</para>
            </section>
        </section>
        <section>
            <title>Fase di elaborazione</title>
            <section>
                <title>Revisione del modello architetturale</title>
                <para> Revisori: QE</para>
                <para> Verifiche: complessità, coesione, completezza rispetto al problema,
                    compatibilità con le specifiche dei requisiti, dimensioni, chiarezza, compatibilità rispetto al piano di schieramento, calcolo dell'indice di qualità strutturale DSQI. </para>
                <para> Esito: il modello architetturale raffina coerentemente il modello elaborato e rivisto in fase di avvio. È pienamente compatibile con le specifiche dei requisiti e mantiene dimensioni più che accettabili. La strutturazione a quattro livelli tipica delle applicazioni enterprise conferisce al progetto un adeguato accoppiamento tra i moduli così come una buona coesione. Si rileva la compatibilità del modello rispetto al piano di schieramento.
<!--                Di seguito si propone il calcolo dell'indice di qualità strutturale DSQI:-->
<!--                -->
<!--                s1 Numero totale di moduli.-->
<!--                s2 Numero di moduli che producono output, o il cui funzionamento dipende dalla fonte-->
<!--                   dei dati in ingresso-->
<!--                s3 Numero di moduli il cui funzionamento dipende da elaborazioni precedenti.-->
<!--                s4 Numero totale di elementi (intesi come attributi) nella basi di dati.-->
<!--                s5 Numero di elementi distinti nella basi di dati.-->
<!--                s6 Numero di segmenti della basi di dati.-->
<!--                s7 Numero di moduli con un solo punti di ingresso ed un solo punto di uscita.-->
<!--                -->
<!--                D1 = 1-->
<!--                D2 = 1 − (s2/s1)-->
<!--                D3 = 1 − (s3/s1)-->
<!--                D4 = 1 − (s5/s4)-->
<!--                D5 = 1 − (s6/s4)-->
<!--                D6 = 1 − (s7/s1)-->
                </para>
            </section>
            <section>
                <title>Collaudo del prototipo architetturale</title>
                <para>Revisori: squadra.</para>
                <para> Verifiche: coerenza del prototipo rispetto al modello architetturale, collaudo delle interazioni tra i tre principali livelli architetturali: scrivere e visualizzare tramite browser dei dati memorizzati sul sistema informativo. Verifica della compatibilità del prototipo rispetto ai requisiti R1N, R2N, R3N.2, R4N.3 e R4N.1</para>
                <para> Esito: il prototipo ha superato con successo le verifiche previste.</para>
            </section>
            <section>
                <title>Revisione del piano di schieramento</title>
                <para> La revisione del piano di schieramento sarà informale e non necessiterà di
                    essere documentata. </para>
            </section>
        </section>
        <section>
            <title>Fase di costruzione</title>
            <section>
                <title>Collaudo delle unità</title>
                <para>Collaudatori: squadra.</para>
                <para>Modalità di collaudo: sviluppare test di regressione con JUnit; in particolare si consiglia di
                fare attenzione ai test sui valori limite e sui flussi eccezionali. </para>
            </section>
            <section>
                <title>Collaudo di integrazione</title>
                <para>Collaudatori: squadra.</para>
                <para>Modalità di collaudo: verificare la corretta integrazione del modulo business, del modulo presentazione e
                del modulo informativo in un singolo nodo Jboss.</para>
            </section>
            <section>
                <title>Collaudo dello schieramento</title>
                <para>Collaudatori: squadra.</para>
                <para>Modalità di collaudo: schierare l'applicazione in due cluster omogenei nelle macchine dipartimentali: verificare la corretta configurazione
                dei nodi JBoss, del database MySQL e del load balancer.</para>
            </section>
        </section>
        <section>
            <title>Fase di transizione</title>
            <section>
                <title>Validazione</title>
                <para>Collaudatori: squadra.</para>
                <para>Modalità di collaudo: verificare che l'applicazione soddisfi tutti i requisiti mediante user testing basato sui casi d'uso.</para>
            </section>
        </section>
    </section>
    <section>
    <title>Risultati delle misurazioni e dei collaudi sul software</title>
    <para>
    A titolo d'esempio si riporta in questa sezione un output del plugin EclipseMetrics relativo ai pacchetti
    <filename>g8.bookshop.business.core</filename> e <filename>g8.bookshop.business.util</filename>.
    Nella prima tabella sono presenti le metriche calcolate sulle classi, mentre nella seconda sui metodi.
    <figure xml:id="metrics_classes">
                        <title>Metriche sulle classi</title>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="ReportQualita/EclipseMetricsClasses.png"
                                    align="center" depth="200pt" format="PNG"/>
                            </imageobject>
                        </mediaobject>
    </figure>
    <figure xml:id="metrics_methods">
                        <title>Metriche sui metodi</title>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="ReportQualita/EclipseMetricsMethods-v.png"
                                    align="center" depth="650pt" format="PNG"/>
                            </imageobject>
                        </mediaobject>
    </figure>
    </para>
    <para>
    Nella figura che segue invece è stato catturato un output di JUnit durante il ciclo di sviluppo del prodotto.
    <figure xml:id="test_junit">
                        <title>Metriche sulle classi</title>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="ReportJUnit/ReportJUnit.png"
                                    align="center" depth="200pt" format="PNG"/>
                            </imageobject>
                        </mediaobject>
    </figure>
    </para>
    </section>
</chapter>
